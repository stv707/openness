# SPDX-License-Identifier: Apache-2.0
# Copyright (c) 2020 Intel Corporation

---

- name: copy docker registry file
  copy:
    src: "{{ item }}"
    dest: "{{ _registry_location }}"
    mode: 0744
  with_items:
    - genCerts.sh

- name: create directory for copying certificate
  file:
    path: /etc/docker/certs.d/{{ _registry_ip_address }}:{{ _registry_port }}
    state: directory
  changed_when: true

- name: create openness namespace if needed
  block:
  - name: check if openness namespace exists
    command: kubectl get ns openness
    ignore_errors: yes
    register: get_ns_openness
  - name: create openness namespace
    command: kubectl create namespace openness
    when: get_ns_openness.rc == 1

- name: docker-registry create self signed certificate
  command : "{{ item }}"
  with_items:
    - rm -rf extfile.cnf *.key *.crt *.csr *.cert
    - ./genCerts.sh  {{ _registry_ip_address }}
    - cp -rf  ca.crt client.cert client.key /etc/docker/certs.d/{{ _registry_ip_address }}:{{ _registry_port }}/
    - rm -rf  client.csr client.cert client.key
  args:
    chdir: "{{ _registry_location }}"
  changed_when: true

- name: delete docker registry pod if it exists
  command: "{{ item }}"
  with_items:
    - kubectl -n openness delete deployment docker-registry-deployment
    - kubectl -n openness delete secret  docker-registry-rootca docker-registry-server-cert
  ignore_errors: yes
  changed_when: true

- name: force delete docker registry pod if available
  shell: for p in $(kubectl get pods -n openness | grep docker-registry | awk '{print $1}'); do kubectl delete pod $p -n openness --grace-period=0 --force;done
  changed_when: true
  ignore_errors: yes

- name: template a file to docker_registry.yml
  template:
    src: docker_registry.yml.j2
    dest: "{{ _registry_location }}/docker_registry.yml"
    mode: '0644'

- name: deploy docker-registry pod on master node
  command: "{{ item }}"
  with_items:
    - kubectl -n openness create secret generic docker-registry-rootca  --from-file=./ca.key --from-file=./ca.crt
    - kubectl -n openness create secret generic docker-registry-server-cert --from-file=./server.key --from-file=./server.cert
    - rm -rf server.key server.csr server.cert
    - kubectl apply -f docker_registry.yml
  args:
    chdir: "{{ _registry_location }}"
  changed_when: true

- name: add firewall rules for docker registry
  command: "{{ item }}"
  with_items:
    - firewall-cmd --permanent --direct --add-rule ipv4 filter INPUT 0 -p tcp --dport 5000 -j ACCEPT
    - firewall-cmd --reload
  ignore_errors: yes
  changed_when: true

- name: copy docker registry curl command script file registry_curl_cmd.sh.j2
  template:
    src: registry_curl_cmd.sh.j2
    dest:  "{{ ansible_env.HOME }}/registry_curl_cmd.sh"
    mode: '0744'
